/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace GPv2Order {
  export type DataStruct = {
    sellToken: PromiseOrValue<string>;
    buyToken: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    sellAmount: PromiseOrValue<BigNumberish>;
    buyAmount: PromiseOrValue<BigNumberish>;
    validTo: PromiseOrValue<BigNumberish>;
    appData: PromiseOrValue<BytesLike>;
    feeAmount: PromiseOrValue<BigNumberish>;
    kind: PromiseOrValue<BytesLike>;
    partiallyFillable: PromiseOrValue<boolean>;
    sellTokenBalance: PromiseOrValue<BytesLike>;
    buyTokenBalance: PromiseOrValue<BytesLike>;
  };

  export type DataStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    string,
    boolean,
    string,
    string
  ] & {
    sellToken: string;
    buyToken: string;
    receiver: string;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    validTo: number;
    appData: string;
    feeAmount: BigNumber;
    kind: string;
    partiallyFillable: boolean;
    sellTokenBalance: string;
    buyTokenBalance: string;
  };
}

export interface DCAOrderInterface extends utils.Interface {
  functions: {
    "amount()": FunctionFragment;
    "buyToken()": FunctionFragment;
    "cancel()": FunctionFragment;
    "currentSlot()": FunctionFragment;
    "deposit()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "endTime()": FunctionFragment;
    "getTradeableOrder()": FunctionFragment;
    "initialize(address,address,address,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "interval()": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "orderSlots()": FunctionFragment;
    "owner()": FunctionFragment;
    "principal()": FunctionFragment;
    "receiver()": FunctionFragment;
    "sellToken()": FunctionFragment;
    "slotSellAmount()": FunctionFragment;
    "startTime()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amount"
      | "buyToken"
      | "cancel"
      | "currentSlot"
      | "deposit"
      | "domainSeparator"
      | "endTime"
      | "getTradeableOrder"
      | "initialize"
      | "interval"
      | "isValidSignature"
      | "orderSlots"
      | "owner"
      | "principal"
      | "receiver"
      | "sellToken"
      | "slotSellAmount"
      | "startTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentSlot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTradeableOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderSlots",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "principal", values?: undefined): string;
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "slotSellAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeableOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderSlots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "principal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slotSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;

  events: {
    "Cancelled(address)": EventFragment;
    "ConditionalOrderCreated(address)": EventFragment;
    "Initialized(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionalOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface CancelledEventObject {
  order: string;
}
export type CancelledEvent = TypedEvent<[string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ConditionalOrderCreatedEventObject {
  arg0: string;
}
export type ConditionalOrderCreatedEvent = TypedEvent<
  [string],
  ConditionalOrderCreatedEventObject
>;

export type ConditionalOrderCreatedEventFilter =
  TypedEventFilter<ConditionalOrderCreatedEvent>;

export interface InitializedEventObject {
  order: string;
}
export type InitializedEvent = TypedEvent<[string], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface DCAOrder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DCAOrderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyToken(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentSlot(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { slot: BigNumber }>;

    deposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTradeableOrder(
      overrides?: CallOverrides
    ): Promise<[GPv2Order.DataStructOutput]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _sellToken: PromiseOrValue<string>,
      _buyToken: PromiseOrValue<string>,
      _principal: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _settlementContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interval(overrides?: CallOverrides): Promise<[BigNumber]>;

    isValidSignature(
      orderDigest: PromiseOrValue<BytesLike>,
      encodedOrder: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderSlots(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { slots: BigNumber[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    principal(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    sellToken(overrides?: CallOverrides): Promise<[string]>;

    slotSellAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { orderSellAmount: BigNumber }>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  buyToken(overrides?: CallOverrides): Promise<string>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentSlot(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  getTradeableOrder(
    overrides?: CallOverrides
  ): Promise<GPv2Order.DataStructOutput>;

  initialize(
    _owner: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _sellToken: PromiseOrValue<string>,
    _buyToken: PromiseOrValue<string>,
    _principal: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _interval: PromiseOrValue<BigNumberish>,
    _settlementContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interval(overrides?: CallOverrides): Promise<BigNumber>;

  isValidSignature(
    orderDigest: PromiseOrValue<BytesLike>,
    encodedOrder: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderSlots(overrides?: CallOverrides): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  principal(overrides?: CallOverrides): Promise<BigNumber>;

  receiver(overrides?: CallOverrides): Promise<string>;

  sellToken(overrides?: CallOverrides): Promise<string>;

  slotSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(overrides?: CallOverrides): Promise<string>;

    cancel(overrides?: CallOverrides): Promise<void>;

    currentSlot(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<boolean>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeableOrder(
      overrides?: CallOverrides
    ): Promise<GPv2Order.DataStructOutput>;

    initialize(
      _owner: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _sellToken: PromiseOrValue<string>,
      _buyToken: PromiseOrValue<string>,
      _principal: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _settlementContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSignature(
      orderDigest: PromiseOrValue<BytesLike>,
      encodedOrder: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderSlots(overrides?: CallOverrides): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    principal(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<string>;

    sellToken(overrides?: CallOverrides): Promise<string>;

    slotSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Cancelled(address)"(
      order?: PromiseOrValue<string> | null
    ): CancelledEventFilter;
    Cancelled(order?: PromiseOrValue<string> | null): CancelledEventFilter;

    "ConditionalOrderCreated(address)"(
      arg0?: PromiseOrValue<string> | null
    ): ConditionalOrderCreatedEventFilter;
    ConditionalOrderCreated(
      arg0?: PromiseOrValue<string> | null
    ): ConditionalOrderCreatedEventFilter;

    "Initialized(address)"(
      order?: PromiseOrValue<string> | null
    ): InitializedEventFilter;
    Initialized(order?: PromiseOrValue<string> | null): InitializedEventFilter;
  };

  estimateGas: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentSlot(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeableOrder(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _sellToken: PromiseOrValue<string>,
      _buyToken: PromiseOrValue<string>,
      _principal: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _settlementContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSignature(
      orderDigest: PromiseOrValue<BytesLike>,
      encodedOrder: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderSlots(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    principal(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    sellToken(overrides?: CallOverrides): Promise<BigNumber>;

    slotSellAmount(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentSlot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradeableOrder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _sellToken: PromiseOrValue<string>,
      _buyToken: PromiseOrValue<string>,
      _principal: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _settlementContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidSignature(
      orderDigest: PromiseOrValue<BytesLike>,
      encodedOrder: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderSlots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    principal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slotSellAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
