/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface VaultInterface extends utils.Interface {
  functions: {
    'balance()': FunctionFragment;
    'cancel()': FunctionFragment;
    'driver()': FunctionFragment;
    'execute(bytes,bool)': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'token()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balance'
      | 'cancel'
      | 'driver'
      | 'execute'
      | 'initialize'
      | 'owner'
      | 'token'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'balance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancel', values?: undefined): string;
  encodeFunctionData(functionFragment: 'driver', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'execute',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'balance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'driver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {
    'Cancelled(address)': EventFragment;
    'Initialized(address,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Cancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
}

export interface CancelledEventObject {
  vault: string;
}
export type CancelledEvent = TypedEvent<[string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface InitializedEventObject {
  vault: string;
  owner: string;
  token: string;
}
export type InitializedEvent = TypedEvent<
  [string, string, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    driver(overrides?: CallOverrides): Promise<[string]>;

    execute(
      orderUid: PromiseOrValue<BytesLike>,
      signed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _driver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  driver(overrides?: CallOverrides): Promise<string>;

  execute(
    orderUid: PromiseOrValue<BytesLike>,
    signed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: PromiseOrValue<string>,
    _driver: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(overrides?: CallOverrides): Promise<void>;

    driver(overrides?: CallOverrides): Promise<string>;

    execute(
      orderUid: PromiseOrValue<BytesLike>,
      signed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: PromiseOrValue<string>,
      _driver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Cancelled(address)'(
      vault?: PromiseOrValue<string> | null
    ): CancelledEventFilter;
    Cancelled(vault?: PromiseOrValue<string> | null): CancelledEventFilter;

    'Initialized(address,address,address)'(
      vault?: PromiseOrValue<string> | null,
      owner?: null,
      token?: null
    ): InitializedEventFilter;
    Initialized(
      vault?: PromiseOrValue<string> | null,
      owner?: null,
      token?: null
    ): InitializedEventFilter;
  };

  estimateGas: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    driver(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      orderUid: PromiseOrValue<BytesLike>,
      signed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _driver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    driver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      orderUid: PromiseOrValue<BytesLike>,
      signed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _driver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
